{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . 2 Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . 2","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"API/","text":"API General batch-processing pipeline opt_k2 (folder_path, target_channel = None): This functions calculates the optimal K2 for a batch of samples (raw TIFF files) to be analyzed. Please include all samples from different groups to be compared into the same document. Parameters: folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' target_channel : int, optional. It should be an provided int for most of the situations. If your raw TIFF file does not have the channel dimension, please use default. Returns: K2: float, your estimated optimal K2 for a total batch of sample for comparison analyze_document_2D (folder_path, obj_channel, k2, pixel_size = 1): Process and analyze all the raw tiff samples in your document by 2D mode and output the result as a table (dataframe). All images are automatically transformed to 12 bit to be compatible. In 2D mode, K1 = 2.5. Parameters: folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' obj_channel : int. Your channel index of cytoskeleton fluoresence in the 4D array read from raw TIFF k2 : number. The universal K2 you set. Recommend use the optimal K2 calculated by the function opt_k2 pixel_size : number, optional. The physical lenghth unit of your pixel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, the unit \"PU\" in your output table should be considered as \u03bcm. Returns: Pandas dataframe, all cytoskeleton indices. You can process it inside python IDE or export it as excel file. analyze_document_3D (folder_path, obj_channel, k2, xy_unit, z_unit, pixel_size = 1, single_k = True, use_GPU = False): Process and analyze all the raw tiff samples in your document in 3D mode and output the result as a table (dataframe). All images are automatically transformed to 12 bit to be compatible. Please note that it can be slow if the MATLAB-based GPU acceleration is not available. In 3D mode, K1 = 10^((log10(2.5)+log10(K2))/2). Parameters folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' obj_channel : int, your channel index of cytoskeleton fluoresence in the 4D array read from raw TIFF. k2 : number, the universal K2 you set. Recommend use the optimal K2 calculated by the function opt_k2. xy_unit : number, the unit size of x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number, the unit size of z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. pixel_size : number, optional. The physical lenghth unit (on x- and y-axis) of your voxel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, it should be equal to the parameter xy_unit, and the unit \"PU\" in your output table should be considered as \u03bcm. single_k : bool, optional. Whether to use single-K mode (use only K1) to save time. The default is True. use_GPU : bool, optional. Whether to activate GPU acceleration. We highly recommend you turn it on if you have MATLAB and compatible GPU. The default is False. Returns pandas dataframe, all cytoskeleton indices. You can process it inside python IDE or export it as excel file. Processing individual sample rearrange_image_dimension (img, target_channel = None): Transform your image array of any demension order (most likely x(height)-y(width)-z(stack)-channel or channel-x-y-z structure, depending on your confocal microscope) into z-x-y array with your object channel.This function depends on sorting, so your channel number must be lower than your stack number, and your stack number (z-resolution) must be lower than your x and y resolution. Parameters img : 3D or 4D array, the image read from a tiff file by skimage.io target_channel : int, your cytoskeleton fluorescence channel index. If img is 3D array (only one channel, which is your cytoskeleton), target_channel must be None. Returns 3D array, the image of your object channel extracted from TIFF-generated 4D array, in z-x-y format . ILEE_2d (img, k2, k1 = 2.5, pL_type = 'pL_8', gauss_dif = True): In 2D mode, generate a difference image (raw_image - threshold_image) as ILEE output for downstream analysis or visualization. Parameters img : float 2D array. An image of z-axis maximum projection of your target channel or the 2D \"raw\" image. Values should be transformed into float type with 0-4095 dynamic range. For example, if you have a 12 bit int-type image, as a variable img, then it should be used as img.astype('float'); if you have a 16 bit int-type image, then you should transform img into img2 = img.astype('float')/65535*4095. k2 : a number; should be your pre-determined optimal K2 for comparison purpose. k1 : The default is 2.5, which can identify one-pixel-size filament. pL_type : string, Laplacian matrix type. The default and recommended is 'pL_8'. gauss_dif : Bool, default is True; whether the difference image is slightly gaussian-blurred for smoother render. Returns float 2D array, the rendered 2D difference image. analyze_actin_2d_standard (img, img_dif, pixel_size = 1): Compute all cytoskeleton indices using 2d raw and difference image as input. Parameters img : float 2D array. The input 2D image. img_dif : float 2D array. The difference image (raw_image - threshold_image) generated by ILEE_2d. pixel_size : number, optional. The physical lenghth unit of your pixel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, the unit \"PU\" in your output table should be considered as \u03bcm. Returns pandas.DataFrame, all cytoskeleton indices of input sample: occupancy, linear_density, skewness, cv, Diameter_tdt, Diameter_sdt, sev_act, branching_act, anisotropy. ILEE_3d (img, xy_unit, z_unit, k1, k2, single_k1 = False, use_matlab = False, use_matlabGPU = False, gauss_dif = True): In 3D mode, generate a difference image (raw_image - threshold_image) as ILEE output for downstream analysis or visualization. Parameters img : 3D array. The input 3D image. Values should be transformed into float type with 0-4095 dynamic range. For example, if you have a 12 bit int-type image, as a variable img, then it should be used as img.astype('float'); if you have a 16 bit int-type image, then you should transform img into img2 = img.astype('float')/65535*4095. xy_unit : number. The unit size of voxel on x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number. The unit size of voxel on z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. k1 : number. ILEE K1. for 3D mode we recommend K1 = 10^((log10(2.5)+log10(K2))/2). k2 : number. ILEE K2. single_k1 : bool, optional. Whether to use single-K mode (use only K1) to save time. The default is False. use_matlab : bool, optional. Whether to use MATLAB for ILEE. The default is False. use_matlabGPU : bool, optional. Whether to activate GPU_acceleration in MATLAB. The default is False. If use_matlab is False, this makes no difference. gauss_dif : Bool, optional. Whether the difference image is gaussian-blurred slightly for smoother render. Default is True. Returns float 3D array, the rendered 3D difference image, the same shape as input. analyze_actin_3d_standard (img, img_dif_ori, xy_unit, z_unit, oversampling_for_bundle = True, pixel_size = 1): Compute all cytoskeleton indices using 3d raw and difference image as input. Parameters img : 3D array. Input 3D image img_dif_ori : 3D array. The difference image to define the cytoskeleton components. xy_unit : number. The unit size of voxel on x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number. The unit size of voxel on z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. oversampling_for_bundle : bool, optional. Whether to use oversampled image to calculated diameter indices. Recommend to turn on for accuracy. The default is True. pixel_size : number, optional. The physical lenghth unit (on x- and y-axis) of your voxel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, it should be equal to the parameter xy_unit, and the unit \"PU\" in your output table should be considered as \u03bcm. Returns pandas.DataFrame, all cytoskeleton indices of input sample: occupancy, linear_density, skewness, cv, Diameter_tdt, Diameter_sdt, sev_act, branching_act, anisotropy.","title":"API"},{"location":"API/#api","text":"","title":"API"},{"location":"API/#general-batch-processing-pipeline","text":"opt_k2 (folder_path, target_channel = None): This functions calculates the optimal K2 for a batch of samples (raw TIFF files) to be analyzed. Please include all samples from different groups to be compared into the same document. Parameters: folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' target_channel : int, optional. It should be an provided int for most of the situations. If your raw TIFF file does not have the channel dimension, please use default. Returns: K2: float, your estimated optimal K2 for a total batch of sample for comparison analyze_document_2D (folder_path, obj_channel, k2, pixel_size = 1): Process and analyze all the raw tiff samples in your document by 2D mode and output the result as a table (dataframe). All images are automatically transformed to 12 bit to be compatible. In 2D mode, K1 = 2.5. Parameters: folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' obj_channel : int. Your channel index of cytoskeleton fluoresence in the 4D array read from raw TIFF k2 : number. The universal K2 you set. Recommend use the optimal K2 calculated by the function opt_k2 pixel_size : number, optional. The physical lenghth unit of your pixel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, the unit \"PU\" in your output table should be considered as \u03bcm. Returns: Pandas dataframe, all cytoskeleton indices. You can process it inside python IDE or export it as excel file. analyze_document_3D (folder_path, obj_channel, k2, xy_unit, z_unit, pixel_size = 1, single_k = True, use_GPU = False): Process and analyze all the raw tiff samples in your document in 3D mode and output the result as a table (dataframe). All images are automatically transformed to 12 bit to be compatible. Please note that it can be slow if the MATLAB-based GPU acceleration is not available. In 3D mode, K1 = 10^((log10(2.5)+log10(K2))/2). Parameters folder_path : string, a local path of your image samples. The final document name should contain an \"/\" in the end, for example, folder_path = 'D:/experiment/all my samples/' obj_channel : int, your channel index of cytoskeleton fluoresence in the 4D array read from raw TIFF. k2 : number, the universal K2 you set. Recommend use the optimal K2 calculated by the function opt_k2. xy_unit : number, the unit size of x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number, the unit size of z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. pixel_size : number, optional. The physical lenghth unit (on x- and y-axis) of your voxel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, it should be equal to the parameter xy_unit, and the unit \"PU\" in your output table should be considered as \u03bcm. single_k : bool, optional. Whether to use single-K mode (use only K1) to save time. The default is True. use_GPU : bool, optional. Whether to activate GPU acceleration. We highly recommend you turn it on if you have MATLAB and compatible GPU. The default is False. Returns pandas dataframe, all cytoskeleton indices. You can process it inside python IDE or export it as excel file.","title":"General batch-processing pipeline"},{"location":"API/#processing-individual-sample","text":"rearrange_image_dimension (img, target_channel = None): Transform your image array of any demension order (most likely x(height)-y(width)-z(stack)-channel or channel-x-y-z structure, depending on your confocal microscope) into z-x-y array with your object channel.This function depends on sorting, so your channel number must be lower than your stack number, and your stack number (z-resolution) must be lower than your x and y resolution. Parameters img : 3D or 4D array, the image read from a tiff file by skimage.io target_channel : int, your cytoskeleton fluorescence channel index. If img is 3D array (only one channel, which is your cytoskeleton), target_channel must be None. Returns 3D array, the image of your object channel extracted from TIFF-generated 4D array, in z-x-y format . ILEE_2d (img, k2, k1 = 2.5, pL_type = 'pL_8', gauss_dif = True): In 2D mode, generate a difference image (raw_image - threshold_image) as ILEE output for downstream analysis or visualization. Parameters img : float 2D array. An image of z-axis maximum projection of your target channel or the 2D \"raw\" image. Values should be transformed into float type with 0-4095 dynamic range. For example, if you have a 12 bit int-type image, as a variable img, then it should be used as img.astype('float'); if you have a 16 bit int-type image, then you should transform img into img2 = img.astype('float')/65535*4095. k2 : a number; should be your pre-determined optimal K2 for comparison purpose. k1 : The default is 2.5, which can identify one-pixel-size filament. pL_type : string, Laplacian matrix type. The default and recommended is 'pL_8'. gauss_dif : Bool, default is True; whether the difference image is slightly gaussian-blurred for smoother render. Returns float 2D array, the rendered 2D difference image. analyze_actin_2d_standard (img, img_dif, pixel_size = 1): Compute all cytoskeleton indices using 2d raw and difference image as input. Parameters img : float 2D array. The input 2D image. img_dif : float 2D array. The difference image (raw_image - threshold_image) generated by ILEE_2d. pixel_size : number, optional. The physical lenghth unit of your pixel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, the unit \"PU\" in your output table should be considered as \u03bcm. Returns pandas.DataFrame, all cytoskeleton indices of input sample: occupancy, linear_density, skewness, cv, Diameter_tdt, Diameter_sdt, sev_act, branching_act, anisotropy. ILEE_3d (img, xy_unit, z_unit, k1, k2, single_k1 = False, use_matlab = False, use_matlabGPU = False, gauss_dif = True): In 3D mode, generate a difference image (raw_image - threshold_image) as ILEE output for downstream analysis or visualization. Parameters img : 3D array. The input 3D image. Values should be transformed into float type with 0-4095 dynamic range. For example, if you have a 12 bit int-type image, as a variable img, then it should be used as img.astype('float'); if you have a 16 bit int-type image, then you should transform img into img2 = img.astype('float')/65535*4095. xy_unit : number. The unit size of voxel on x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number. The unit size of voxel on z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. k1 : number. ILEE K1. for 3D mode we recommend K1 = 10^((log10(2.5)+log10(K2))/2). k2 : number. ILEE K2. single_k1 : bool, optional. Whether to use single-K mode (use only K1) to save time. The default is False. use_matlab : bool, optional. Whether to use MATLAB for ILEE. The default is False. use_matlabGPU : bool, optional. Whether to activate GPU_acceleration in MATLAB. The default is False. If use_matlab is False, this makes no difference. gauss_dif : Bool, optional. Whether the difference image is gaussian-blurred slightly for smoother render. Default is True. Returns float 3D array, the rendered 3D difference image, the same shape as input. analyze_actin_3d_standard (img, img_dif_ori, xy_unit, z_unit, oversampling_for_bundle = True, pixel_size = 1): Compute all cytoskeleton indices using 3d raw and difference image as input. Parameters img : 3D array. Input 3D image img_dif_ori : 3D array. The difference image to define the cytoskeleton components. xy_unit : number. The unit size of voxel on x- and y-axis by \u03bcm. Please check using ImageJ. z_unit : number. The unit size of voxel on z-axis by \u03bcm, which is also your step size of stack imaging. Please check using ImageJ. oversampling_for_bundle : bool, optional. Whether to use oversampled image to calculated diameter indices. Recommend to turn on for accuracy. The default is True. pixel_size : number, optional. The physical lenghth unit (on x- and y-axis) of your voxel, by micrometer (\u03bcm). The default is 1. If you set it into the real pixel size, it should be equal to the parameter xy_unit, and the unit \"PU\" in your output table should be considered as \u03bcm.","title":"Processing individual sample"},{"location":"API/#returns","text":"pandas.DataFrame, all cytoskeleton indices of input sample: occupancy, linear_density, skewness, cv, Diameter_tdt, Diameter_sdt, sev_act, branching_act, anisotropy.","title":"Returns"},{"location":"Home/","text":"ILEE_CSK The eukaryotic cytoskeleton plays essential roles in cell signaling, trafficking, and motion. We aim to provide the best cytoskeleton segmentation-analysis algorithm and platform. ILEE_CSK is a Python library that provides a platform for unguided and automated quantitative analysis of cytoskeletal images at high accuracy, which support both 2D and native 3D data structure. ILEE means Implicit Laplacian of Enhanced Edge, which is a local thresholding algorithm that detects and uses the edge of cytoskeleton filaments as the local baseline for fine thresholding. Our robust algorithm captures and computes native pixel/voxel value, first-order derivative (gradient), and second-order derivative (Laplacian) of the image to automatedly generate a threshold image for cytoskeleton segmentation. The binary image of cytoskeleton fraction, together with the raw image is processed to compute more than 10 cytoskeleton indices, which are the matrices that measure the cytoskeletal features, of 5 classes: density, bundling, severing, branching, and directionality. The generated data can be used to determine and discover critical cytoskeletal feature of your own biological samples. In general, ILEE_CSK provides following state-of-art features to make outstanding performance: Support of native 3D mode, avoiding image projection that losses a considerable amount of information perpendicular to z-axis. Unguided algorithm, avoiding human-bias related to subjective judgment in manual global thresholding, the currently most popular approach. High accuracy, the top among the kind. Please read our paper. Most complete cytoskeleton index list, with many novel indices developed by ourselves. Presentation Visualization of results processed by ILEE. Comparison of ILEE and other classic image segmentation approaches.","title":"Home"},{"location":"Home/#ilee_csk","text":"The eukaryotic cytoskeleton plays essential roles in cell signaling, trafficking, and motion. We aim to provide the best cytoskeleton segmentation-analysis algorithm and platform. ILEE_CSK is a Python library that provides a platform for unguided and automated quantitative analysis of cytoskeletal images at high accuracy, which support both 2D and native 3D data structure. ILEE means Implicit Laplacian of Enhanced Edge, which is a local thresholding algorithm that detects and uses the edge of cytoskeleton filaments as the local baseline for fine thresholding. Our robust algorithm captures and computes native pixel/voxel value, first-order derivative (gradient), and second-order derivative (Laplacian) of the image to automatedly generate a threshold image for cytoskeleton segmentation. The binary image of cytoskeleton fraction, together with the raw image is processed to compute more than 10 cytoskeleton indices, which are the matrices that measure the cytoskeletal features, of 5 classes: density, bundling, severing, branching, and directionality. The generated data can be used to determine and discover critical cytoskeletal feature of your own biological samples. In general, ILEE_CSK provides following state-of-art features to make outstanding performance: Support of native 3D mode, avoiding image projection that losses a considerable amount of information perpendicular to z-axis. Unguided algorithm, avoiding human-bias related to subjective judgment in manual global thresholding, the currently most popular approach. High accuracy, the top among the kind. Please read our paper. Most complete cytoskeleton index list, with many novel indices developed by ourselves.","title":"ILEE_CSK"},{"location":"Home/#presentation","text":"Visualization of results processed by ILEE. Comparison of ILEE and other classic image segmentation approaches.","title":"Presentation"},{"location":"Tutorial/","text":"For users without Python experience ILEE_CSK is a python library and therefore we need to setup your python environment to process your data. Don't be afraid, should not be difficult. First, we need to install your python environment. For novice, we only recommend the one-step simplest way: Anaconda . Please find the Anaconda installer that applies to your computer at https://www.anaconda.com/products/individual, and install it. Anaconda has a python environment has most of the libraries we need, so you do not need to install other libraries. Anaconda has a well-established Python IDE (Integrated development environment) Spyder optimized for scientific computation and visualization. Please just regard it as a powerful calculator in your computer. When you installed our library, you need to open Spyder to compute your samples. You can either search Spyder in your apps or open Anaconda Navigator to open it. Typically it looks like this: Since you need to install ILEE_CSK, you need to use commend lines. Please note that you should NOT use your Windows or Apple command lines, but instead, please open Anaconda Prompt and enter the install commands you wants. This makes your intended libraries installed in Anaconda environment particularly. You can either search Anaconda Prompt in your apps or open Anaconda Navigator to open it. It should look like this: This is the interface where you can install any library. We use use it for library installing purposes, which should not be confounded with Spyder. Installing ILEE_CSK ILEE_CSK is available at pipy... pip install ILEE_CSK ILEE_CSK supports MATLAB-based GPU acceleration for native-3D image processing. If you have MATLAB license as well as CUDA GPU, and wish to proceed native-3D mode. Please download...... Installing napari for 3D visualization The napari is a multi-dimensional image viewer for python. It is a outstanding tool for confocal image visualization, especially for visualizing 3D dnapariata structure. We just recommend you directly follow their documentation to install it: https://napari.org/. Cytoskeleton indices computation Batch processing all samples in a document Confocal images of cytoskeletons are generally taken as 3D stacks (Native 3D structure). Hereby we support batch processing of files of 3D stack. If your source images are already 2D, please check our API to process it individually. Generating TIFF raw images by FIJI (ImageJ). FIJI is a java-based free-to-use image processing GUI software with optimized for scientific use. If you don't have it, please download it and congratulations -- you have found a great treasure. Put all of your confocal image files in the same document. Open FIJI, select process->batch->convert Input is the document of your raw confocal-format files; output is wherever you want. Press convert, and we just get what we need for ILEE. Please note that output format MUST BE tiff, interpolation MUST be None, and scale factor MUST BE 1. This make sure your tiff is literally raw data. Find your channel index and K2 You need to learn the data structure of the raw TIFF files you generated to finish parameter setting. Please get the path of one of your generated TIFF file and read it by skimage.io, such as: image_example_path = 'D:/my_experiments/generated_TIFF_images/sample_001.tiff' from skimage import io img = io.imread(image_example_path) Generally, img should be a 4D array, and one of the dimension with the smallest size among the four dimensions should be your fluorescence channel. (For Python novice, you can check the Spyder variable explorer on the column \"size\".) For example, when I use a Olympus confocal system and I gets a array with dimension size of (25, 3, 800, 800), which means (z, channel, x, y). Difference confocal system have these numbers occur at different order. Since you know how did you take the image by confocal, you can understand what these number means easily. NOTE: Our batch processing pipeline requires your channel to be the dimension with the lowest size, and the second lowest to be z-axis resolution. This applies to almost all of the cytoskeleton confocal images, because the number of channels is generally no greater than 5, with maximum 4 fluorescence channels plus a transmission channel, and z-stack number is usually greater than 5 to cover the total cell. If you have a abnormal data structure that does not apply, we wish to you inform us about what the structure is and why it is necessary, so that we may improve our algorithm. You need to figure out which of your channel is the cytoskeleton fluorescence channel you want to analyze. Generally, the channel order will be the same as your confocal setting, and be aware that Python index start from 0 instead of 1. For example, if I used channel 1 to see GFP-labeled actin, channel 2 to see chloroplast far-red light, and an additional transmission channel to see bright field, my objective index is supposed to be 0 (for channel 1). However, to clearly verify which one is your objective channel, you can try visualize their projected image: import matplotlib.pyplot as plt img = img[:,0,:,:] #You can change this \"0\" to the other channel indexes you want to check. img = np.amax(img, axis=0) #In my case, my first dimension (index 0) is z-axis, if your z-axis is another dimension, please change accordingly. #run this three line together: plt.figure(figsize = (18, 18)) plt.imshow(img) plt.show() Another way is directly see the 3D voxel image by napari: import napari with napari.gui_qt(): viewer = napari.Viewer() for i in range(3): #This 3 is the total number of your channels. Change accordingly. viewer.add_image(img[:,i,:,:]) When you learn your data structure, you can start to evaluate your K2 for the batch using the function opt_k2 . For example, if my index of cytoskeleton fluorescence channel is 0, you can do like such: import ILEE_CSK folder = 'D:/my_experiments/generated_TIFF_images/' the_optimal_K2 = ILEE_CSK.opt_k2(folder_path = folder, target_channel = 0) Batch processing by 2D mode After you determine the optimal K2 for you sample pool. Using the same fluorescence channel index, you can finish batch processing by just one step: results = ILEE_CSK.analyze_document_2D (folder_path = folder, obj_channel = 0, k2 = the_optimal_K2) Please read the API to learn about the parameters. The \"results\" will be a table in format of Pandas dataframe, which you can check and process within python IDE. You may also want to directly output it as an Excel file, which can be done as such: result.to_excel('D:/my_experiments/generated_TIFF_images/analysis_result.xlsx') Batch processing by 3D mode on CPU Batch processing on 3D mode use a similar pipeline function that is easy to use. We recommend no less than 16G memory, otherwise it may fail. You need to manually check your voxel size on x/y- and z-axis by \u03bcm, if you don't remember. A simple way is to check by FIJI (ImageJ); after open one of you samples, select image->Show Info to get it. In the example above, my voxel size is 0.132\u03bcm on x/y-axis and 0.5\u03bcm on z-axis. You can use batch processing function on 3D mode. I will use my image information as an example: results = ILEE_CSK.analyze_document_3D (folder_path = folder, obj_channel = 0, k2 = the_optimal_K2, xy_unit = 0.132, z_unit = 0.5, pixel_size = 0.132, single_k = True, use_GPU = False) The setting above uses CPU mode, which is very slow (5~7min per 25x800x800 image). Therefore, we highly recommend to turn on single_k mode to save half of the time with acceptable sacrifice at accuracy on thick filaments. Batch processing by 3D mode on GPU","title":"Tutorial"},{"location":"Tutorial/#for-users-without-python-experience","text":"ILEE_CSK is a python library and therefore we need to setup your python environment to process your data. Don't be afraid, should not be difficult. First, we need to install your python environment. For novice, we only recommend the one-step simplest way: Anaconda . Please find the Anaconda installer that applies to your computer at https://www.anaconda.com/products/individual, and install it. Anaconda has a python environment has most of the libraries we need, so you do not need to install other libraries. Anaconda has a well-established Python IDE (Integrated development environment) Spyder optimized for scientific computation and visualization. Please just regard it as a powerful calculator in your computer. When you installed our library, you need to open Spyder to compute your samples. You can either search Spyder in your apps or open Anaconda Navigator to open it. Typically it looks like this: Since you need to install ILEE_CSK, you need to use commend lines. Please note that you should NOT use your Windows or Apple command lines, but instead, please open Anaconda Prompt and enter the install commands you wants. This makes your intended libraries installed in Anaconda environment particularly. You can either search Anaconda Prompt in your apps or open Anaconda Navigator to open it. It should look like this: This is the interface where you can install any library. We use use it for library installing purposes, which should not be confounded with Spyder.","title":"For users without Python experience"},{"location":"Tutorial/#installing-ilee_csk","text":"ILEE_CSK is available at pipy... pip install ILEE_CSK ILEE_CSK supports MATLAB-based GPU acceleration for native-3D image processing. If you have MATLAB license as well as CUDA GPU, and wish to proceed native-3D mode. Please download......","title":"Installing ILEE_CSK"},{"location":"Tutorial/#installing-napari-for-3d-visualization","text":"The napari is a multi-dimensional image viewer for python. It is a outstanding tool for confocal image visualization, especially for visualizing 3D dnapariata structure. We just recommend you directly follow their documentation to install it: https://napari.org/.","title":"Installing napari for 3D visualization"},{"location":"Tutorial/#cytoskeleton-indices-computation","text":"","title":"Cytoskeleton indices computation"},{"location":"Tutorial/#batch-processing-all-samples-in-a-document","text":"Confocal images of cytoskeletons are generally taken as 3D stacks (Native 3D structure). Hereby we support batch processing of files of 3D stack. If your source images are already 2D, please check our API to process it individually.","title":"Batch processing all samples in a document"},{"location":"Tutorial/#generating-tiff-raw-images-by-fiji-imagej","text":"FIJI is a java-based free-to-use image processing GUI software with optimized for scientific use. If you don't have it, please download it and congratulations -- you have found a great treasure. Put all of your confocal image files in the same document. Open FIJI, select process->batch->convert Input is the document of your raw confocal-format files; output is wherever you want. Press convert, and we just get what we need for ILEE. Please note that output format MUST BE tiff, interpolation MUST be None, and scale factor MUST BE 1. This make sure your tiff is literally raw data.","title":"Generating TIFF raw images by FIJI (ImageJ)."},{"location":"Tutorial/#find-your-channel-index-and-k2","text":"You need to learn the data structure of the raw TIFF files you generated to finish parameter setting. Please get the path of one of your generated TIFF file and read it by skimage.io, such as: image_example_path = 'D:/my_experiments/generated_TIFF_images/sample_001.tiff' from skimage import io img = io.imread(image_example_path) Generally, img should be a 4D array, and one of the dimension with the smallest size among the four dimensions should be your fluorescence channel. (For Python novice, you can check the Spyder variable explorer on the column \"size\".) For example, when I use a Olympus confocal system and I gets a array with dimension size of (25, 3, 800, 800), which means (z, channel, x, y). Difference confocal system have these numbers occur at different order. Since you know how did you take the image by confocal, you can understand what these number means easily. NOTE: Our batch processing pipeline requires your channel to be the dimension with the lowest size, and the second lowest to be z-axis resolution. This applies to almost all of the cytoskeleton confocal images, because the number of channels is generally no greater than 5, with maximum 4 fluorescence channels plus a transmission channel, and z-stack number is usually greater than 5 to cover the total cell. If you have a abnormal data structure that does not apply, we wish to you inform us about what the structure is and why it is necessary, so that we may improve our algorithm. You need to figure out which of your channel is the cytoskeleton fluorescence channel you want to analyze. Generally, the channel order will be the same as your confocal setting, and be aware that Python index start from 0 instead of 1. For example, if I used channel 1 to see GFP-labeled actin, channel 2 to see chloroplast far-red light, and an additional transmission channel to see bright field, my objective index is supposed to be 0 (for channel 1). However, to clearly verify which one is your objective channel, you can try visualize their projected image: import matplotlib.pyplot as plt img = img[:,0,:,:] #You can change this \"0\" to the other channel indexes you want to check. img = np.amax(img, axis=0) #In my case, my first dimension (index 0) is z-axis, if your z-axis is another dimension, please change accordingly. #run this three line together: plt.figure(figsize = (18, 18)) plt.imshow(img) plt.show() Another way is directly see the 3D voxel image by napari: import napari with napari.gui_qt(): viewer = napari.Viewer() for i in range(3): #This 3 is the total number of your channels. Change accordingly. viewer.add_image(img[:,i,:,:]) When you learn your data structure, you can start to evaluate your K2 for the batch using the function opt_k2 . For example, if my index of cytoskeleton fluorescence channel is 0, you can do like such: import ILEE_CSK folder = 'D:/my_experiments/generated_TIFF_images/' the_optimal_K2 = ILEE_CSK.opt_k2(folder_path = folder, target_channel = 0)","title":"Find your channel index and K2"},{"location":"Tutorial/#batch-processing-by-2d-mode","text":"After you determine the optimal K2 for you sample pool. Using the same fluorescence channel index, you can finish batch processing by just one step: results = ILEE_CSK.analyze_document_2D (folder_path = folder, obj_channel = 0, k2 = the_optimal_K2) Please read the API to learn about the parameters. The \"results\" will be a table in format of Pandas dataframe, which you can check and process within python IDE. You may also want to directly output it as an Excel file, which can be done as such: result.to_excel('D:/my_experiments/generated_TIFF_images/analysis_result.xlsx')","title":"Batch processing by 2D mode"},{"location":"Tutorial/#batch-processing-by-3d-mode-on-cpu","text":"Batch processing on 3D mode use a similar pipeline function that is easy to use. We recommend no less than 16G memory, otherwise it may fail. You need to manually check your voxel size on x/y- and z-axis by \u03bcm, if you don't remember. A simple way is to check by FIJI (ImageJ); after open one of you samples, select image->Show Info to get it. In the example above, my voxel size is 0.132\u03bcm on x/y-axis and 0.5\u03bcm on z-axis. You can use batch processing function on 3D mode. I will use my image information as an example: results = ILEE_CSK.analyze_document_3D (folder_path = folder, obj_channel = 0, k2 = the_optimal_K2, xy_unit = 0.132, z_unit = 0.5, pixel_size = 0.132, single_k = True, use_GPU = False) The setting above uses CPU mode, which is very slow (5~7min per 25x800x800 image). Therefore, we highly recommend to turn on single_k mode to save half of the time with acceptable sacrifice at accuracy on thick filaments.","title":"Batch processing by 3D mode on CPU"},{"location":"Tutorial/#batch-processing-by-3d-mode-on-gpu","text":"","title":"Batch processing by 3D mode on GPU"}]}